package org.scalafmt.tests

object MemberSuite extends BaseScalaPrinterTest {
  check("val a = 1")
  check("var a = 1")
  check("def a = 1")
  check("def a(b: B) = 1")
  check("def a[A](b: B = c) = 1")
  check("def a(implicit b: B, c: C) = b")
  check("val a: Int = 1")
  check("var a: Int = 1")
  check("def a: Int = 1")
  check("def a: Int")
  check("type A = B")
  check("type A >: B <: C")
  check("type A[B] = C")
  check("val a: Int")
  check("var a: Int")
  check("var a, b = 1")
  check("val a, b = 1")
  check("var a, b: Int")
  check("val a, b: Int")
  check("val a_ : Int")
  check("class A")
  check("object A")
  check("trait A")
  check("class A private (a: A)")
  check("final case class A()")
  check("abstract class A(val b: B)")
  check("implicit class A(var b: B)")
  check("private class A")
  check("private[a] class A")
  check("private[this] class A")
  check("protected[a] def b = 2")
  check("protected def a = 2")
  check("sealed trait A")
  check("@a def b = 1")
  check("@a(1) def b = 1")
  check("@a @b def c = 1")
  check("@(a @b) @c val x = 1")
  check("@(a @b(1, 2)(3)) val x = 1")
  check("def a(@b c: C) = 1")
  check("def a(implicit b: B) = 1")
  check("class A[B] extends C with D { val a = 1 }")
  check("object A extends B with C { val x = 1 }")
  check("trait a { self: D => }")
  check("trait A { _: A => }")
  check("class A extends { var x = 2 } with B")
  check("class A extends B[C](1)")
  check("def this(a: A) = this(a)")
  check("def a[A: B]: Unit")
  check("def a[A : B : C]: Unit")
  check("def a[A <% B]: Unit")
}
