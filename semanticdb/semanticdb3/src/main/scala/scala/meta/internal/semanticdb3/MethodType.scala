// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3.semanticdb3

@SerialVersionUID(0L)
final case class MethodType(
    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.Scope] = None,
    parameterLists: _root_.scala.collection.Seq[scala.meta.internal.semanticdb3.semanticdb3.Scope] = _root_.scala.collection.Seq.empty,
    returnType: scala.meta.internal.semanticdb3.semanticdb3.Type = scala.meta.internal.semanticdb3.semanticdb3.Type.Empty
    ) extends scala.meta.internal.semanticdb3.semanticdb3.Type with scalapb.GeneratedMessage with scalapb.Message[MethodType] with scalapb.lenses.Updatable[MethodType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (typeParameters.isDefined) {
        val __value = typeParameters.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      parameterLists.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (returnType.isDefined) {
        val __value = returnType.asTypeMessage
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (returnType.isDefined) { 
        val __m = returnType.asTypeMessage
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeParameters.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      parameterLists.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb3.semanticdb3.MethodType = {
      var __typeParameters = this.typeParameters
      val __parameterLists = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb3.semanticdb3.Scope] ++= this.parameterLists)
      var __returnType = this.returnType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 34 =>
            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.Scope.defaultInstance)))
          case 42 =>
            __parameterLists += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb3.semanticdb3.Scope.defaultInstance)
          case 26 =>
            __returnType = _root_.scalapb.LiteParser.readMessage(_input__, __returnType.asTypeMessage).value
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb3.semanticdb3.MethodType(
          typeParameters = __typeParameters,
          parameterLists = __parameterLists.result(),
          returnType = __returnType
      )
    }
    def getTypeParameters: scala.meta.internal.semanticdb3.semanticdb3.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.Scope.defaultInstance)
    def clearTypeParameters: MethodType = copy(typeParameters = None)
    def withTypeParameters(__v: scala.meta.internal.semanticdb3.semanticdb3.Scope): MethodType = copy(typeParameters = Option(__v))
    def clearParameterLists = copy(parameterLists = _root_.scala.collection.Seq.empty)
    def addParameterLists(__vs: scala.meta.internal.semanticdb3.semanticdb3.Scope*): MethodType = addAllParameterLists(__vs)
    def addAllParameterLists(__vs: TraversableOnce[scala.meta.internal.semanticdb3.semanticdb3.Scope]): MethodType = copy(parameterLists = parameterLists ++ __vs)
    def withParameterLists(__v: _root_.scala.collection.Seq[scala.meta.internal.semanticdb3.semanticdb3.Scope]): MethodType = copy(parameterLists = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => typeParameters.orNull
        case 5 => parameterLists
        case 3 => {
          val __t = returnType
          if (__t != scala.meta.internal.semanticdb3.semanticdb3.Type.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 4 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(parameterLists.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => returnType.asTypeMessage.toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb3.semanticdb3.MethodType
}

object MethodType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.semanticdb3.MethodType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.semanticdb3.MethodType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb3.semanticdb3.MethodType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb3.semanticdb3.MethodType(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.Scope]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[scala.meta.internal.semanticdb3.semanticdb3.Scope]],
      __fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb3.semanticdb3.Type.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb3.semanticdb3.Type]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb3.semanticdb3.MethodType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb3.semanticdb3.MethodType(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.Scope]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[scala.meta.internal.semanticdb3.semanticdb3.Scope]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.Type]).getOrElse(scala.meta.internal.semanticdb3.semanticdb3.Type.defaultInstance)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Semanticdb3Proto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Semanticdb3Proto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = scala.meta.internal.semanticdb3.semanticdb3.Scope
      case 5 => __out = scala.meta.internal.semanticdb3.semanticdb3.Scope
      case 3 => __out = scala.meta.internal.semanticdb3.semanticdb3.Type.Message
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scala.meta.internal.semanticdb3.semanticdb3.MethodType(
  )
  implicit class MethodTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.MethodType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.MethodType](_l) {
    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
    def parameterLists: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[scala.meta.internal.semanticdb3.semanticdb3.Scope]] = field(_.parameterLists)((c_, f_) => c_.copy(parameterLists = f_))
    def returnType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.Type] = field(_.returnType)((c_, f_) => c_.copy(returnType = f_))
  }
  final val TYPE_PARAMETERS_FIELD_NUMBER = 4
  final val PARAMETERLISTS_FIELD_NUMBER = 5
  final val RETURN_TYPE_FIELD_NUMBER = 3
}
