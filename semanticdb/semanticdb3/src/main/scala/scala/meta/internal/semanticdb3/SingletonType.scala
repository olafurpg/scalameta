// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3.semanticdb3

@SerialVersionUID(0L)
final case class SingletonType(
    tag: scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag = scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.UNKNOWN_SINGLETON,
    prefix: scala.meta.internal.semanticdb3.semanticdb3.Type = scala.meta.internal.semanticdb3.semanticdb3.Type.Empty,
    symbol: _root_.scala.Predef.String = "",
    primitive: _root_.scala.Long = 0L,
    string: _root_.scala.Predef.String = ""
    ) extends scala.meta.internal.semanticdb3.semanticdb3.Type with scalapb.GeneratedMessage with scalapb.Message[SingletonType] with scalapb.lenses.Updatable[SingletonType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = tag
        if (__value != scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.UNKNOWN_SINGLETON) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
        }
      };
      if (prefix.isDefined) {
        val __value = prefix.asTypeMessage
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = symbol
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = primitive
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = string
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = tag
        if (__v != scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.UNKNOWN_SINGLETON) {
          _output__.writeEnum(1, __v.value)
        }
      };
      if (prefix.isDefined) { 
        val __m = prefix.asTypeMessage
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = symbol
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = primitive
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = string
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb3.semanticdb3.SingletonType = {
      var __tag = this.tag
      var __prefix = this.prefix
      var __symbol = this.symbol
      var __primitive = this.primitive
      var __string = this.string
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __tag = scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.fromValue(_input__.readEnum())
          case 18 =>
            __prefix = _root_.scalapb.LiteParser.readMessage(_input__, __prefix.asTypeMessage).value
          case 26 =>
            __symbol = _input__.readString()
          case 32 =>
            __primitive = _input__.readInt64()
          case 42 =>
            __string = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb3.semanticdb3.SingletonType(
          tag = __tag,
          prefix = __prefix,
          symbol = __symbol,
          primitive = __primitive,
          string = __string
      )
    }
    def withTag(__v: scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag): SingletonType = copy(tag = __v)
    def withSymbol(__v: _root_.scala.Predef.String): SingletonType = copy(symbol = __v)
    def withPrimitive(__v: _root_.scala.Long): SingletonType = copy(primitive = __v)
    def withString(__v: _root_.scala.Predef.String): SingletonType = copy(string = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = tag.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = prefix
          if (__t != scala.meta.internal.semanticdb3.semanticdb3.Type.defaultInstance) __t else null
        }
        case 3 => {
          val __t = symbol
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = primitive
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = string
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(tag.scalaValueDescriptor)
        case 2 => prefix.asTypeMessage.toPMessage
        case 3 => _root_.scalapb.descriptors.PString(symbol)
        case 4 => _root_.scalapb.descriptors.PLong(primitive)
        case 5 => _root_.scalapb.descriptors.PString(string)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scala.meta.internal.semanticdb3.semanticdb3.SingletonType
}

object SingletonType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.semanticdb3.SingletonType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb3.semanticdb3.SingletonType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb3.semanticdb3.SingletonType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scala.meta.internal.semanticdb3.semanticdb3.SingletonType(
      scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.fromValue(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.UNKNOWN_SINGLETON.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb3.semanticdb3.Type.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb3.semanticdb3.Type],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb3.semanticdb3.SingletonType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scala.meta.internal.semanticdb3.semanticdb3.SingletonType(
        scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag.UNKNOWN_SINGLETON.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.Type]).getOrElse(scala.meta.internal.semanticdb3.semanticdb3.Type.defaultInstance),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Semanticdb3Proto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Semanticdb3Proto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scala.meta.internal.semanticdb3.semanticdb3.Type.Message
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag
    }
  }
  lazy val defaultInstance = scala.meta.internal.semanticdb3.semanticdb3.SingletonType(
  )
  sealed trait Tag extends _root_.scalapb.GeneratedEnum {
    type EnumType = Tag
    def isUnknownSingleton: _root_.scala.Boolean = false
    def isSymbol: _root_.scala.Boolean = false
    def isThis: _root_.scala.Boolean = false
    def isSuper: _root_.scala.Boolean = false
    def isUnit: _root_.scala.Boolean = false
    def isBoolean: _root_.scala.Boolean = false
    def isByte: _root_.scala.Boolean = false
    def isShort: _root_.scala.Boolean = false
    def isChar: _root_.scala.Boolean = false
    def isInt: _root_.scala.Boolean = false
    def isLong: _root_.scala.Boolean = false
    def isFloat: _root_.scala.Boolean = false
    def isDouble: _root_.scala.Boolean = false
    def isString: _root_.scala.Boolean = false
    def isNull: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Tag] = scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag
  }
  
  object Tag extends _root_.scalapb.GeneratedEnumCompanion[Tag] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Tag] = this
    @SerialVersionUID(0L)
    case object UNKNOWN_SINGLETON extends Tag {
      val value = 0
      val index = 0
      val name = "UNKNOWN_SINGLETON"
      override def isUnknownSingleton: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SYMBOL extends Tag {
      val value = 1
      val index = 1
      val name = "SYMBOL"
      override def isSymbol: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object THIS extends Tag {
      val value = 2
      val index = 2
      val name = "THIS"
      override def isThis: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SUPER extends Tag {
      val value = 3
      val index = 3
      val name = "SUPER"
      override def isSuper: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNIT extends Tag {
      val value = 4
      val index = 4
      val name = "UNIT"
      override def isUnit: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BOOLEAN extends Tag {
      val value = 5
      val index = 5
      val name = "BOOLEAN"
      override def isBoolean: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BYTE extends Tag {
      val value = 6
      val index = 6
      val name = "BYTE"
      override def isByte: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SHORT extends Tag {
      val value = 7
      val index = 7
      val name = "SHORT"
      override def isShort: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CHAR extends Tag {
      val value = 8
      val index = 8
      val name = "CHAR"
      override def isChar: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object INT extends Tag {
      val value = 9
      val index = 9
      val name = "INT"
      override def isInt: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LONG extends Tag {
      val value = 10
      val index = 10
      val name = "LONG"
      override def isLong: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FLOAT extends Tag {
      val value = 11
      val index = 11
      val name = "FLOAT"
      override def isFloat: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DOUBLE extends Tag {
      val value = 12
      val index = 12
      val name = "DOUBLE"
      override def isDouble: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STRING extends Tag {
      val value = 13
      val index = 13
      val name = "STRING"
      override def isString: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object NULL extends Tag {
      val value = 14
      val index = 14
      val name = "NULL"
      override def isNull: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Tag with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(UNKNOWN_SINGLETON, SYMBOL, THIS, SUPER, UNIT, BOOLEAN, BYTE, SHORT, CHAR, INT, LONG, FLOAT, DOUBLE, STRING, NULL)
    def fromValue(value: _root_.scala.Int): Tag = value match {
      case 0 => UNKNOWN_SINGLETON
      case 1 => SYMBOL
      case 2 => THIS
      case 3 => SUPER
      case 4 => UNIT
      case 5 => BOOLEAN
      case 6 => BYTE
      case 7 => SHORT
      case 8 => CHAR
      case 9 => INT
      case 10 => LONG
      case 11 => FLOAT
      case 12 => DOUBLE
      case 13 => STRING
      case 14 => NULL
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb3.semanticdb3.SingletonType.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb3.semanticdb3.SingletonType.scalaDescriptor.enums(0)
  }
  implicit class SingletonTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.SingletonType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.SingletonType](_l) {
    def tag: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.SingletonType.Tag] = field(_.tag)((c_, f_) => c_.copy(tag = f_))
    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb3.semanticdb3.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
    def primitive: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.primitive)((c_, f_) => c_.copy(primitive = f_))
    def string: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.string)((c_, f_) => c_.copy(string = f_))
  }
  final val TAG_FIELD_NUMBER = 1
  final val PREFIX_FIELD_NUMBER = 2
  final val SYMBOL_FIELD_NUMBER = 3
  final val PRIMITIVE_FIELD_NUMBER = 4
  final val STRING_FIELD_NUMBER = 5
}
