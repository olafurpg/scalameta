// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3.semanticdb3

object Semanticdb3Proto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    scala.meta.internal.semanticdb3.semanticdb3.TextDocuments,
    scala.meta.internal.semanticdb3.semanticdb3.TextDocument,
    scala.meta.internal.semanticdb3.semanticdb3.Range,
    scala.meta.internal.semanticdb3.semanticdb3.Location,
    scala.meta.internal.semanticdb3.semanticdb3.Scope,
    scala.meta.internal.semanticdb3.semanticdb3.Type.Message,
    scala.meta.internal.semanticdb3.semanticdb3.TypeRef,
    scala.meta.internal.semanticdb3.semanticdb3.SingletonType,
    scala.meta.internal.semanticdb3.semanticdb3.IntersectionType,
    scala.meta.internal.semanticdb3.semanticdb3.UnionType,
    scala.meta.internal.semanticdb3.semanticdb3.WithType,
    scala.meta.internal.semanticdb3.semanticdb3.StructuralType,
    scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType,
    scala.meta.internal.semanticdb3.semanticdb3.ExistentialType,
    scala.meta.internal.semanticdb3.semanticdb3.UniversalType,
    scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType,
    scala.meta.internal.semanticdb3.semanticdb3.MethodType,
    scala.meta.internal.semanticdb3.semanticdb3.ByNameType,
    scala.meta.internal.semanticdb3.semanticdb3.RepeatedType,
    scala.meta.internal.semanticdb3.semanticdb3.TypeType,
    scala.meta.internal.semanticdb3.semanticdb3.SymbolInformation,
    scala.meta.internal.semanticdb3.semanticdb3.Annotation,
    scala.meta.internal.semanticdb3.semanticdb3.Accessibility,
    scala.meta.internal.semanticdb3.semanticdb3.SymbolOccurrence,
    scala.meta.internal.semanticdb3.semanticdb3.Diagnostic,
    scala.meta.internal.semanticdb3.semanticdb3.Synthetic
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """ChFzZW1hbnRpY2RiMy5wcm90bxIfc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMyJcCg1UZXh0RG9jdW1lbnRzEksKC
  WRvY3VtZW50cxgBIAMoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVGV4dERvY3VtZW50Uglkb2N1bWVudHMih
  gQKDFRleHREb2N1bWVudBI/CgZzY2hlbWEYASABKA4yJy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlNjaGVtYVIGc
  2NoZW1hEhAKA3VyaRgCIAEoCVIDdXJpEhIKBHRleHQYAyABKAlSBHRleHQSRQoIbGFuZ3VhZ2UYCiABKA4yKS5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIzLkxhbmd1YWdlUghsYW5ndWFnZRJMCgdzeW1ib2xzGAUgAygLMjIuc2NhbGEubWV0YS5pbnRlc
  m5hbC5zZW1hbnRpY2RiMy5TeW1ib2xJbmZvcm1hdGlvblIHc3ltYm9scxJTCgtvY2N1cnJlbmNlcxgGIAMoCzIxLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU3ltYm9sT2NjdXJyZW5jZVILb2NjdXJyZW5jZXMSTQoLZGlhZ25vc3RpY3MYByADKAsyK
  y5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkRpYWdub3N0aWNSC2RpYWdub3N0aWNzEkoKCnN5bnRoZXRpY3MYCCADK
  AsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlN5bnRoZXRpY1IKc3ludGhldGljc0oECAQQBUoECAkQCiKPAQoFU
  mFuZ2USHQoKc3RhcnRfbGluZRgBIAEoBVIJc3RhcnRMaW5lEicKD3N0YXJ0X2NoYXJhY3RlchgCIAEoBVIOc3RhcnRDaGFyYWN0Z
  XISGQoIZW5kX2xpbmUYAyABKAVSB2VuZExpbmUSIwoNZW5kX2NoYXJhY3RlchgEIAEoBVIMZW5kQ2hhcmFjdGVyIloKCExvY2F0a
  W9uEhAKA3VyaRgBIAEoCVIDdXJpEjwKBXJhbmdlGAIgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5SYW5nZ
  VIFcmFuZ2UidQoFU2NvcGUSGgoIc3ltbGlua3MYASADKAlSCHN5bWxpbmtzElAKCWhhcmRsaW5rcxgCIAMoCzIyLnNjYWxhLm1ld
  GEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU3ltYm9sSW5mb3JtYXRpb25SCWhhcmRsaW5rcyKgCQoEVHlwZRJECgd0eXBlUmVmGAIgA
  SgLMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUmVmSABSB3R5cGVSZWYSVgoNc2luZ2xldG9uVHlwZRgQI
  AEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2luZ2xldG9uVHlwZUgAUg1zaW5nbGV0b25UeXBlEl8KEGlud
  GVyc2VjdGlvblR5cGUYESABKAsyMS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkludGVyc2VjdGlvblR5cGVIAFIQa
  W50ZXJzZWN0aW9uVHlwZRJKCgl1bmlvblR5cGUYEiABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlVuaW9uV
  HlwZUgAUgl1bmlvblR5cGUSRwoId2l0aFR5cGUYEyABKAsyKS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLldpdGhUe
  XBlSABSCHdpdGhUeXBlElkKDnN0cnVjdHVyYWxUeXBlGAcgASgLMi8uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5Td
  HJ1Y3R1cmFsVHlwZUgAUg5zdHJ1Y3R1cmFsVHlwZRJWCg1hbm5vdGF0ZWRUeXBlGAggASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hb
  C5zZW1hbnRpY2RiMy5Bbm5vdGF0ZWRUeXBlSABSDWFubm90YXRlZFR5cGUSXAoPZXhpc3RlbnRpYWxUeXBlGAkgASgLMjAuc2Nhb
  GEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5FeGlzdGVudGlhbFR5cGVIAFIPZXhpc3RlbnRpYWxUeXBlElYKDXVuaXZlcnNhb
  FR5cGUYCiABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlVuaXZlcnNhbFR5cGVIAFINdW5pdmVyc2FsVHlwZ
  RJWCg1jbGFzc0luZm9UeXBlGAsgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5DbGFzc0luZm9UeXBlSABSD
  WNsYXNzSW5mb1R5cGUSTQoKbWV0aG9kVHlwZRgMIAEoCzIrLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuTWV0aG9kV
  HlwZUgAUgptZXRob2RUeXBlEk0KCmJ5TmFtZVR5cGUYDSABKAsyKy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkJ5T
  mFtZVR5cGVIAFIKYnlOYW1lVHlwZRJTCgxyZXBlYXRlZFR5cGUYDiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
  GIzLlJlcGVhdGVkVHlwZUgAUgxyZXBlYXRlZFR5cGUSRwoIdHlwZVR5cGUYDyABKAsyKS5zY2FsYS5tZXRhLmludGVybmFsLnNlb
  WFudGljZGIzLlR5cGVUeXBlSABSCHR5cGVUeXBlQgcKBXZhbHVlIq4BCgdUeXBlUmVmEj0KBnByZWZpeBgBIAEoCzIlLnNjYWxhL
  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIGcHJlZml4EhYKBnN5bWJvbBgCIAEoCVIGc3ltYm9sEkwKDnR5cGVfYXJnd
  W1lbnRzGAMgAygLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUg10eXBlQXJndW1lbnRzIpgDCg1TaW5nb
  GV0b25UeXBlEkQKA3RhZxgBIAEoDjIyLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2luZ2xldG9uVHlwZS5UYWdSA
  3RhZxI9CgZwcmVmaXgYAiABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBnByZWZpeBIWCgZzeW1ib
  2wYAyABKAlSBnN5bWJvbBIcCglwcmltaXRpdmUYBCABKANSCXByaW1pdGl2ZRIWCgZzdHJpbmcYBSABKAlSBnN0cmluZyKzAQoDV
  GFnEhUKEVVOS05PV05fU0lOR0xFVE9OEAASCgoGU1lNQk9MEAESCAoEVEhJUxACEgkKBVNVUEVSEAMSCAoEVU5JVBAEEgsKB0JPT
  0xFQU4QBRIICgRCWVRFEAYSCQoFU0hPUlQQBxIICgRDSEFSEAgSBwoDSU5UEAkSCAoETE9ORxAKEgkKBUZMT0FUEAsSCgoGRE9VQ
  kxFEAwSCgoGU1RSSU5HEA0SCAoETlVMTBAOIk8KEEludGVyc2VjdGlvblR5cGUSOwoFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIzLlR5cGVSBXR5cGVzIkgKCVVuaW9uVHlwZRI7CgV0eXBlcxgBIAMoCzIlLnNjYWxhLm1ldGEua
  W50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIFdHlwZXMiRwoIV2l0aFR5cGUSOwoFdHlwZXMYASADKAsyJS5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIzLlR5cGVSBXR5cGVzIqcBCg5TdHJ1Y3R1cmFsVHlwZRI3CgN0cGUYBCABKAsyJS5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA3RwZRJKCgxkZWNsYXJhdGlvbnMYBSABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsL
  nNlbWFudGljZGIzLlNjb3BlUgxkZWNsYXJhdGlvbnNKBAgBEAJKBAgCEANKBAgDEAQinQEKDUFubm90YXRlZFR5cGUSTQoLYW5ub
  3RhdGlvbnMYAyADKAsyKy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLkFubm90YXRpb25SC2Fubm90YXRpb25zEjcKA
  3RwZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlSgQIAhADIpwBCg9FeGlzdGVudGlhb
  FR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUSSgoMZGVjbGFyYXRpb
  25zGAMgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY29wZVIMZGVjbGFyYXRpb25zSgQIAhADIp8BCg1Vb
  ml2ZXJzYWxUeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgDIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2Nvc
  GVSDnR5cGVQYXJhbWV0ZXJzEjcKA3RwZRgCIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuVHlwZVIDdHBlS
  gQIARACIvkBCg1DbGFzc0luZm9UeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
  W50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEj8KB3BhcmVudHMYAiADKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
  GljZGIzLlR5cGVSB3BhcmVudHMSSgoMZGVjbGFyYXRpb25zGAUgASgLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiM
  y5TY29wZVIMZGVjbGFyYXRpb25zSgQIARACSgQIAxAEIoECCgpNZXRob2RUeXBlEk8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImL
  nNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhbWV0ZXJzEk4KDnBhcmFtZXRlckxpc3RzGAUgA
  ygLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TY29wZVIOcGFyYW1ldGVyTGlzdHMSRgoLcmV0dXJuX3R5cGUYA
  yABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSCnJldHVyblR5cGVKBAgBEAJKBAgCEAMiRQoKQnlOY
  W1lVHlwZRI3CgN0cGUYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlR5cGVSA3RwZSJHCgxSZXBlYXRlZ
  FR5cGUSNwoDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUi8QEKCFR5cGVUeXBlE
  k8KD3R5cGVfcGFyYW1ldGVycxgEIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuU2NvcGVSDnR5cGVQYXJhb
  WV0ZXJzEkYKC2xvd2VyX2JvdW5kGAIgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgpsb3dlckJvd
  W5kEkYKC3VwcGVyX2JvdW5kGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgp1cHBlckJvdW5kS
  gQIARACIrcHChFTeW1ib2xJbmZvcm1hdGlvbhIWCgZzeW1ib2wYASABKAlSBnN5bWJvbBJFCghsYW5ndWFnZRgQIAEoDjIpLnNjY
  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuTGFuZ3VhZ2VSCGxhbmd1YWdlEksKBGtpbmQYAyABKA4yNy5zY2FsYS5tZXRhL
  mludGVybmFsLnNlbWFudGljZGIzLlN5bWJvbEluZm9ybWF0aW9uLktpbmRSBGtpbmQSHgoKcHJvcGVydGllcxgEIAEoBVIKcHJvc
  GVydGllcxISCgRuYW1lGAUgASgJUgRuYW1lEjcKA3RwZRgLIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuV
  HlwZVIDdHBlEk0KC2Fubm90YXRpb25zGA0gAygLMisuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5Bbm5vdGF0aW9uU
  gthbm5vdGF0aW9ucxJUCg1hY2Nlc3NpYmlsaXR5GA4gASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5BY2Nlc
  3NpYmlsaXR5Ug1hY2Nlc3NpYmlsaXR5IukBCgRLaW5kEhAKDFVOS05PV05fS0lORBAAEgkKBUxPQ0FMEBMSCQoFRklFTEQQFBIKC
  gZNRVRIT0QQAxIPCgtDT05TVFJVQ1RPUhAVEgkKBU1BQ1JPEAYSCAoEVFlQRRAHEg0KCVBBUkFNRVRFUhAIEhIKDlNFTEZfUEFSQ
  U1FVEVSEBESEgoOVFlQRV9QQVJBTUVURVIQCRIKCgZPQkpFQ1QQChILCgdQQUNLQUdFEAsSEgoOUEFDS0FHRV9PQkpFQ1QQDBIJC
  gVDTEFTUxANEgkKBVRSQUlUEA4SDQoJSU5URVJGQUNFEBIixwEKCFByb3BlcnR5EhQKEFVOS05PV05fUFJPUEVSVFkQABIMCghBQ
  lNUUkFDVBAEEgkKBUZJTkFMEAgSCgoGU0VBTEVEEBASDAoISU1QTElDSVQQIBIICgRMQVpZEEASCQoEQ0FTRRCAARIOCglDT1ZBU
  klBTlQQgAISEgoNQ09OVFJBVkFSSUFOVBCABBIICgNWQUwQgAgSCAoDVkFSEIAQEgsKBlNUQVRJQxCAIBIMCgdQUklNQVJZEIBAE
  goKBEVOVU0QgIABSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIChALSgQIDBANSgQIDxAQIkUKCkFubm90YXRpb24SN
  woDdHBlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5UeXBlUgN0cGUiiAIKDUFjY2Vzc2liaWxpdHkSR
  AoDdGFnGAEgASgOMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5BY2Nlc3NpYmlsaXR5LlRhZ1IDdGFnEhYKBnN5b
  WJvbBgCIAEoCVIGc3ltYm9sIpgBCgNUYWcSGQoVVU5LTk9XTl9BQ0NFU1NJQklMSVRZEAASCwoHUFJJVkFURRABEhAKDFBSSVZBV
  EVfVEhJUxACEhIKDlBSSVZBVEVfV0lUSElOEAMSDQoJUFJPVEVDVEVEEAQSEgoOUFJPVEVDVEVEX1RISVMQBRIUChBQUk9URUNUR
  URfV0lUSElOEAYSCgoGUFVCTElDEAci7QEKEFN5bWJvbE9jY3VycmVuY2USPAoFcmFuZ2UYASABKAsyJi5zY2FsYS5tZXRhLmlud
  GVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZRIWCgZzeW1ib2wYAiABKAlSBnN5bWJvbBJKCgRyb2xlGAMgASgOMjYuc2Nhb
  GEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiMy5TeW1ib2xPY2N1cnJlbmNlLlJvbGVSBHJvbGUiNwoEUm9sZRIQCgxVTktOT1dOX
  1JPTEUQABINCglSRUZFUkVOQ0UQARIOCgpERUZJTklUSU9OEAIiiwIKCkRpYWdub3N0aWMSPAoFcmFuZ2UYASABKAsyJi5zY2FsY
  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlJhbmdlUgVyYW5nZRJQCghzZXZlcml0eRgCIAEoDjI0LnNjYWxhLm1ldGEuaW50Z
  XJuYWwuc2VtYW50aWNkYjMuRGlhZ25vc3RpYy5TZXZlcml0eVIIc2V2ZXJpdHkSGAoHbWVzc2FnZRgDIAEoCVIHbWVzc2FnZSJTC
  ghTZXZlcml0eRIUChBVTktOT1dOX1NFVkVSSVRZEAASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QAxIIC
  gRISU5UEAQijAEKCVN5bnRoZXRpYxI8CgVyYW5nZRgBIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYjMuUmFuZ
  2VSBXJhbmdlEkEKBHRleHQYAiABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIzLlRleHREb2N1bWVudFIEdGV4d
  ColCgZTY2hlbWESCgoGTEVHQUNZEAASDwoLU0VNQU5USUNEQjMQAyo1CghMYW5ndWFnZRIUChBVTktOT1dOX0xBTkdVQUdFEAASC
  QoFU0NBTEEQARIICgRKQVZBEAJiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}