// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scala.meta.internal.semanticdb3.semanticdb3

trait Type {
  final def asTypeMessage: Type.Message = new Type.Message(this)
  final def isEmpty = this == Type.Empty
  final def isDefined = !isEmpty
}
object Type {
  def defaultInstance: Type = Type.Empty
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Type] = {
    _root_.scalapb.descriptors.Reads(_root_.scala.Predef.implicitly[_root_.scalapb.descriptors.Reads[Type.Message]].read.andThen(_.value))
  }
  case object Empty extends Type
  final case class Message(value: Type) extends _root_.scalapb.GeneratedMessage with _root_.scalapb.Message[Type.Message] {
    def number: _root_.scala.Int = value match {
      case _: scala.meta.internal.semanticdb3.semanticdb3.TypeRef => 2
      case _: scala.meta.internal.semanticdb3.semanticdb3.SingletonType => 16
      case _: scala.meta.internal.semanticdb3.semanticdb3.IntersectionType => 17
      case _: scala.meta.internal.semanticdb3.semanticdb3.UnionType => 18
      case _: scala.meta.internal.semanticdb3.semanticdb3.WithType => 19
      case _: scala.meta.internal.semanticdb3.semanticdb3.StructuralType => 7
      case _: scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType => 8
      case _: scala.meta.internal.semanticdb3.semanticdb3.ExistentialType => 9
      case _: scala.meta.internal.semanticdb3.semanticdb3.UniversalType => 10
      case _: scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType => 11
      case _: scala.meta.internal.semanticdb3.semanticdb3.MethodType => 12
      case _: scala.meta.internal.semanticdb3.semanticdb3.ByNameType => 13
      case _: scala.meta.internal.semanticdb3.semanticdb3.RepeatedType => 14
      case _: scala.meta.internal.semanticdb3.semanticdb3.TypeType => 15
    }
    def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.TypeRef] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.TypeRef => _root_.scala.Some(x); case _ => _root_.scala.None }
    def singletonType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.SingletonType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.SingletonType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.IntersectionType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.IntersectionType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def unionType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.UnionType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.UnionType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def withType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.WithType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.WithType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.StructuralType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.StructuralType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.ExistentialType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.ExistentialType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def universalType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.UniversalType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.UniversalType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def classInfoType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def methodType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.MethodType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.MethodType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.ByNameType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.ByNameType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.RepeatedType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.RepeatedType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def typeType: _root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.TypeType] = value match { case x: scala.meta.internal.semanticdb3.semanticdb3.TypeType => _root_.scala.Some(x); case _ => _root_.scala.None }
    def getTypeRef: scala.meta.internal.semanticdb3.semanticdb3.TypeRef = typeRef.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.TypeRef.defaultInstance)
    def getSingletonType: scala.meta.internal.semanticdb3.semanticdb3.SingletonType = singletonType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.SingletonType.defaultInstance)
    def getIntersectionType: scala.meta.internal.semanticdb3.semanticdb3.IntersectionType = intersectionType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.IntersectionType.defaultInstance)
    def getUnionType: scala.meta.internal.semanticdb3.semanticdb3.UnionType = unionType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.UnionType.defaultInstance)
    def getWithType: scala.meta.internal.semanticdb3.semanticdb3.WithType = withType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.WithType.defaultInstance)
    def getStructuralType: scala.meta.internal.semanticdb3.semanticdb3.StructuralType = structuralType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.StructuralType.defaultInstance)
    def getAnnotatedType: scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType = annotatedType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType.defaultInstance)
    def getExistentialType: scala.meta.internal.semanticdb3.semanticdb3.ExistentialType = existentialType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.ExistentialType.defaultInstance)
    def getUniversalType: scala.meta.internal.semanticdb3.semanticdb3.UniversalType = universalType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.UniversalType.defaultInstance)
    def getClassInfoType: scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType = classInfoType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType.defaultInstance)
    def getMethodType: scala.meta.internal.semanticdb3.semanticdb3.MethodType = methodType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.MethodType.defaultInstance)
    def getByNameType: scala.meta.internal.semanticdb3.semanticdb3.ByNameType = byNameType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.ByNameType.defaultInstance)
    def getRepeatedType: scala.meta.internal.semanticdb3.semanticdb3.RepeatedType = repeatedType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.RepeatedType.defaultInstance)
    def getTypeType: scala.meta.internal.semanticdb3.semanticdb3.TypeType = typeType.getOrElse(scala.meta.internal.semanticdb3.semanticdb3.TypeType.defaultInstance)
    override def companion = Type.Message
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb3.semanticdb3.Type.Message = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getTypeRef)
          case 130 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getSingletonType)
          case 138 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getIntersectionType)
          case 146 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getUnionType)
          case 154 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getWithType)
          case 58 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getStructuralType)
          case 66 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getAnnotatedType)
          case 74 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getExistentialType)
          case 82 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getUniversalType)
          case 90 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getClassInfoType)
          case 98 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getMethodType)
          case 106 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getByNameType)
          case 114 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getRepeatedType)
          case 122 =>
            __value = _root_.scalapb.LiteParser.readMessage(_input__, getTypeType)
          case tag => _input__.skipField(tag)
        }
      }
      scala.meta.internal.semanticdb3.semanticdb3.Type.Message(
          value = __value
      )
    }
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => typeRef.orNull
        case 16 => singletonType.orNull
        case 17 => intersectionType.orNull
        case 18 => unionType.orNull
        case 19 => withType.orNull
        case 7 => structuralType.orNull
        case 8 => annotatedType.orNull
        case 9 => existentialType.orNull
        case 10 => universalType.orNull
        case 11 => classInfoType.orNull
        case 12 => methodType.orNull
        case 13 => byNameType.orNull
        case 14 => repeatedType.orNull
        case 15 => typeType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => typeRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => singletonType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => intersectionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => unionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => withType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => structuralType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => annotatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => existentialType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => universalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => classInfoType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => methodType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => byNameType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => repeatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => typeType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def serializedSize: _root_.scala.Int = value match {
      case value: _root_.scalapb.GeneratedMessage => _root_.com.google.protobuf.CodedOutputStream.computeTagSize(number) + _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(value.serializedSize) + value.serializedSize
      case Type.Empty => 0
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    override def writeTo(_output__ : _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = value match {
      case message: _root_.scalapb.GeneratedMessage =>
        _output__.writeTag(number, 2)
        _output__.writeUInt32NoTag(message.serializedSize)
        message.writeTo(_output__)
      case Type.Empty => ()
    }
  }
  object Message extends _root_.scalapb.GeneratedMessageCompanion[Type.Message] {
    def defaultInstance: Type.Message = new Type.Message(Type.Empty)
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb3.semanticdb3.Type.Message] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        new scala.meta.internal.semanticdb3.semanticdb3.Type.Message(
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(0).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.TypeRef])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.SingletonType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.IntersectionType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.UnionType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.WithType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.StructuralType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.ExistentialType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.UniversalType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.MethodType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.ByNameType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.RepeatedType]))
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[scala.meta.internal.semanticdb3.semanticdb3.TypeType]))
    .getOrElse(scala.meta.internal.semanticdb3.semanticdb3.Type.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb3.semanticdb3.Type.Message = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      new scala.meta.internal.semanticdb3.semanticdb3.Type.Message(
        value = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.TypeRef]]
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.SingletonType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.IntersectionType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.UnionType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.WithType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.StructuralType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.ExistentialType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(8)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.UniversalType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(10)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.MethodType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(11)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.ByNameType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(12)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.RepeatedType]])
    .orElse[scala.meta.internal.semanticdb3.semanticdb3.Type](__fieldsMap.get(__fields.get(13)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb3.semanticdb3.TypeType]])
    .getOrElse(scala.meta.internal.semanticdb3.semanticdb3.Type.Empty)
      )
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Semanticdb3Proto.javaDescriptor.getMessageTypes.get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Semanticdb3Proto.scalaDescriptor.messages(5)
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = scala.meta.internal.semanticdb3.semanticdb3.TypeRef
        case 16 => __out = scala.meta.internal.semanticdb3.semanticdb3.SingletonType
        case 17 => __out = scala.meta.internal.semanticdb3.semanticdb3.IntersectionType
        case 18 => __out = scala.meta.internal.semanticdb3.semanticdb3.UnionType
        case 19 => __out = scala.meta.internal.semanticdb3.semanticdb3.WithType
        case 7 => __out = scala.meta.internal.semanticdb3.semanticdb3.StructuralType
        case 8 => __out = scala.meta.internal.semanticdb3.semanticdb3.AnnotatedType
        case 9 => __out = scala.meta.internal.semanticdb3.semanticdb3.ExistentialType
        case 10 => __out = scala.meta.internal.semanticdb3.semanticdb3.UniversalType
        case 11 => __out = scala.meta.internal.semanticdb3.semanticdb3.ClassInfoType
        case 12 => __out = scala.meta.internal.semanticdb3.semanticdb3.MethodType
        case 13 => __out = scala.meta.internal.semanticdb3.semanticdb3.ByNameType
        case 14 => __out = scala.meta.internal.semanticdb3.semanticdb3.RepeatedType
        case 15 => __out = scala.meta.internal.semanticdb3.semanticdb3.TypeType
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  }
}